#!/usr/bin/env python
# -*- coding: utf-8 -*-

from http.server import HTTPServer, BaseHTTPRequestHandler
from socketserver import ThreadingMixIn
import threading

from cheese.modules.cheeseController import CheeseController
from cheese.Logger import Logger
from cheese.ErrorCodes import Error
from python.authorization import Authorization

#REST CONTROLLERS
from python.controllers.fileController import FileController


"""
File generated by Cheese Framework

server handler of Cheese Application
"""

class CheeseServer(ThreadingMixIn, HTTPServer):
    """Handle requests in a separate thread."""

class CheeseHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        try:
            path = CheeseController.getPath(self.path)
            auth = Authorization.authorize(self, path, "GET")

            if (path == "/"):
                CheeseController.serveFile(self, "index.html")
            elif (path.startswith("/files")):
                if (path.startswith("/files/getFiles")):
                    FileController.getFiles(self, self.path, auth)
                elif (path.startswith("/files/delete")):
                    FileController.removeFile(self, self.path, auth)
                else:
                    CheeseController.serveFile(self, self.path)
            else:
                CheeseController.serveFile(self, self.path)
        
        except Exception as e:
            Logger.fail(str(e))
            Error.sendCustomError(self, "Internal server error :(", 500)

    def do_POST(self):
        try:
            auth = Authorization.authorize(self, self.path, "POST")

            if (self.path.startswith("/files")):
                pass
            else:
                Error.sendCustomError(self, "Endpoint not found :(", 404)

        except Exception as e:
            Logger.fail(str(e))
            Error.sendCustomError(self, "Internal server error :(", 500)